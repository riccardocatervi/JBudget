package it.unicam.cs.mpgc.jbudget126139.controller;

import it.unicam.cs.mpgc.jbudget126139.model.RecurrenceFrequency;
import it.unicam.cs.mpgc.jbudget126139.model.TransactionDirection;
import it.unicam.cs.mpgc.jbudget126139.service.dto.TransactionDTO;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Set;
import java.util.UUID;

/**
 * Controller interface for managing recurring transactions.
 * <p>
 * Defines operations to create, delete, and list transactions
 * generated by recurrence patterns.
 * </p>
 */
public interface RecurrenceController {

    /**
     * Creates a set of recurring transactions for a given account.
     *
     * @param accountId   the ID of the account where transactions will be created
     * @param startDate   the start date of the recurrence (inclusive)
     * @param endDate     the end date of the recurrence (may be {@code null} for open-ended)
     * @param frequency   the recurrence frequency (e.g., daily, weekly, monthly)
     * @param amount      the transaction amount (must be greater than zero)
     * @param direction   the transaction direction (credit/income or debit/expense)
     * @param description the description of the recurring transactions (optional)
     * @param tagIds      the set of category/tag IDs to associate with each transaction
     * @return a list of {@link TransactionDTO} representing the created transactions
     */
    List<TransactionDTO> createRecurringTransactions(UUID accountId,
                                                     OffsetDateTime startDate,
                                                     OffsetDateTime endDate,
                                                     RecurrenceFrequency frequency,
                                                     BigDecimal amount,
                                                     TransactionDirection direction,
                                                     String description,
                                                     Set<UUID> tagIds);

    /**
     * Deletes a recurrence pattern and all its future transactions.
     *
     * @param recurrenceId the ID of the recurrence to delete
     */
    void deleteRecurrence(UUID recurrenceId);

    /**
     * Lists all transactions generated by a specific recurrence pattern.
     *
     * @param recurrenceId the ID of the recurrence
     * @return a list of {@link TransactionDTO} associated with the recurrence
     */
    List<TransactionDTO> listTransactionsByRecurrence(UUID recurrenceId);
}