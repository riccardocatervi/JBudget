/*
 * MIT License
 *
 * Copyright (c) 2025 Riccardo Catervi
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This software was designed and implemented as part of the academic
 * requirements of the "Programming Methodologies" course at
 * University of Camerino.
 */

package it.unicam.cs.mpgc.jbudget126139.service.mapper;

import it.unicam.cs.mpgc.jbudget126139.model.NormalTransaction;
import it.unicam.cs.mpgc.jbudget126139.service.dto.TransactionDTO;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.ReportingPolicy;
import org.mapstruct.factory.Mappers;

/**
 * Mapper interface for converting between {@link NormalTransaction} entities
 * and {@link TransactionDTO} data transfer objects.
 * <p>
 * Implementations are automatically generated by MapStruct at compile time.
 * </p>
 */
@Mapper(unmappedTargetPolicy = ReportingPolicy.ERROR)
public interface TransactionMapper {

    /**
     * Singleton instance of the mapper generated by MapStruct.
     */
    TransactionMapper INSTANCE = Mappers.getMapper(TransactionMapper.class);

    /**
     * Converts a {@link NormalTransaction} entity to its corresponding {@link TransactionDTO}.
     * <p>
     * Maps:
     * <ul>
     *     <li>{@code account.id} → {@code accountId}</li>
     *     <li>{@code tags} → {@code tagIds}</li>
     * </ul>
     * </p>
     *
     * @param entity the {@code NormalTransaction} entity to convert
     * @return the corresponding {@code TransactionDTO}
     */
    @Mapping(source = "account.id", target = "accountId")
    @Mapping(source = "tags", target = "tagIds")
    TransactionDTO toDto(NormalTransaction entity);

    /**
     * Converts a {@link TransactionDTO} to a {@link NormalTransaction} entity.
     * <p>
     * The following fields are ignored during mapping:
     * <ul>
     *     <li>{@code account} - handled separately by the service layer</li>
     *     <li>{@code id} - generated by the persistence layer</li>
     *     <li>{@code createdAt} - managed automatically</li>
     * </ul>
     * Maps:
     * <ul>
     *     <li>{@code tagIds} → {@code tags}</li>
     * </ul>
     * </p>
     *
     * @param dto the {@code TransactionDTO} to convert
     * @return the corresponding {@code NormalTransaction} entity
     */
    @Mapping(target = "account", ignore = true)
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(source = "tagIds", target = "tags")
    NormalTransaction toEntity(TransactionDTO dto);
}