package it.unicam.cs.mpgc.jbudget126139.controller.impl;

import it.unicam.cs.mpgc.jbudget126139.controller.RecurrenceController;
import it.unicam.cs.mpgc.jbudget126139.model.RecurrenceFrequency;
import it.unicam.cs.mpgc.jbudget126139.model.TransactionDirection;
import it.unicam.cs.mpgc.jbudget126139.service.RecurrenceTransactionService;
import it.unicam.cs.mpgc.jbudget126139.service.dto.TransactionDTO;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/**
 * Implementation of {@link RecurrenceController} that delegates
 * recurring transaction operations to a {@link RecurrenceTransactionService}.
 * <p>
 * Performs basic validation of input parameters such as null checks
 * and logical consistency of dates before delegating to the service layer.
 * </p>
 */
public class RecurrenceControllerImpl implements RecurrenceController {

    private final RecurrenceTransactionService recurrenceTxService;

    /**
     * Creates a new {@code RecurrenceControllerImpl}.
     *
     * @param recurrenceTxService the service handling recurring transactions (must not be null)
     */
    public RecurrenceControllerImpl(RecurrenceTransactionService recurrenceTxService) {
        this.recurrenceTxService = Objects.requireNonNull(recurrenceTxService);
    }

    /**
     * Creates a series of recurring transactions for the given account.
     *
     * @param accountId   the account identifier
     * @param startDate   the start date of the recurrence
     * @param endDate     the end date of the recurrence (must be after or equal to {@code startDate})
     * @param frequency   the recurrence frequency (e.g. DAILY, WEEKLY, MONTHLY)
     * @param amount      the transaction amount
     * @param direction   the transaction direction (credit or debit)
     * @param description an optional description for the transactions
     * @param tagIds      an optional set of tag identifiers associated with the transactions
     * @return the list of created {@link TransactionDTO}
     * @throws NullPointerException     if any required parameter is {@code null}
     * @throws IllegalArgumentException if {@code startDate} is after {@code endDate}
     */
    @Override
    public List<TransactionDTO> createRecurringTransactions(UUID accountId,
                                                            OffsetDateTime startDate,
                                                            OffsetDateTime endDate,
                                                            RecurrenceFrequency frequency,
                                                            BigDecimal amount,
                                                            TransactionDirection direction,
                                                            String description,
                                                            Set<UUID> tagIds) {
        requireNonNulls(accountId, startDate, endDate, frequency, amount, direction);
        if (startDate.isAfter(endDate)) throw new IllegalArgumentException("startDate must be <= endDate");
        return recurrenceTxService.createRecurringTransactions(
                accountId, startDate, endDate, frequency, amount, direction, description, tagIds
        );
    }

    /**
     * Deletes a recurrence pattern and all associated transactions.
     *
     * @param recurrenceId the recurrence identifier
     * @throws NullPointerException if {@code recurrenceId} is null
     */
    @Override
    public void deleteRecurrence(UUID recurrenceId) {
        Objects.requireNonNull(recurrenceId, "recurrenceId must not be null");
        recurrenceTxService.deleteRecurrence(recurrenceId);
    }

    /**
     * Lists all transactions generated by a specific recurrence.
     *
     * @param recurrenceId the recurrence identifier
     * @return a list of {@link TransactionDTO} belonging to the recurrence
     * @throws NullPointerException if {@code recurrenceId} is null
     */
    @Override
    public List<TransactionDTO> listTransactionsByRecurrence(UUID recurrenceId) {
        Objects.requireNonNull(recurrenceId, "recurrenceId must not be null");
        return recurrenceTxService.listTransactionsByRecurrence(recurrenceId);
    }

    private void requireNonNulls(Object... values) {
        for (Object v : values) Objects.requireNonNull(v);
    }
}